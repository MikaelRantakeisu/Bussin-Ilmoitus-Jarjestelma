package com.tiedontalletus;

import java.util.List;

import org.hibernate.HibernateException;
import org.hibernate.Session;

import com.toimintalogiikka.EntityBean;


public class Repository implements TiedonTalletusRajaPinta{

	@Override
	public EntityBean talletaTietoKantaan(EntityBean entity) {
		try {
			Session session = HibernateUtil.getSessionFactory().getCurrentSession();
			session.beginTransaction();
			session.save(entity);
			session.getTransaction().commit();
			entity.setTeksti("Tietokantaan talletus onnistui");
		} catch (HibernateException e) {
			entity.setTeksti("Tietokantaan talletus ei onnistunut!!");
			entity.setIndeksi(-1);
		}	

		return entity;
	}

	/**
	 * Hakee indeksi‰ vastaavan rivin tietokannasta
	 * ja palauttaa sen oliona kaikki t‰h‰n olioon tehdyt muutoksen
	 * p‰ivittyv‰t automaattisesti tietokantaan
	 * taulu m‰‰ritell‰‰n parametrinaannetun luokan kautta 
	 */
	@Override
	public EntityBean haeTietoKannasta(int indeksi) {

		/**
		 * Hakee tiedot tietokannasta Taulua vastaavan Luokan nimen mukaan("from Luokka")
		 * eik‰ suinkaan suoraan taulun mukaan!!. Ilmeisesti hakee Luokkaa vastaavan Taulun nimen
		 * hibernate ja mapping tiedostojen mukaan ??. 
		 */
		List result = null;
		EntityBean entity = new EntityBean();
		entity.setIndeksi(-1);
		entity.setTeksti("Virhe tietokanta haussa");

		try {
			Session session = HibernateUtil.getSessionFactory().getCurrentSession();
			session.beginTransaction();
			result = session.createQuery("from EntityBean").list();
			session.getTransaction().commit();
		} catch (HibernateException e) {
			entity.setTeksti("Tietojen haku tietokannasta ep‰onnistui. Tapahtui poikkeus:"+e.getLocalizedMessage());
		} 

		if(result.size()==0||result==null){
			entity.setTeksti("Ei hakutuloksia tietokannasta");
			return entity;
		}

		if(indeksi==0){
			entity.setTeksti(Integer.toString(result.size()));
			entity.setIndeksi(result.size());
			return entity;
		}

		for (EntityBean entity2 : (List<EntityBean>) result) {
			if(entity2.getIndeksi()==indeksi)
				return entity2;
		}

		return entity;
	}

	@Override
	public EntityBean alustaTietoKanta() {

		/**
		 * Hibernate: drop table paikkatieto if exists
			Hibernate: create table paikkatieto (ID integer generated by default as identity (start with 1), 
			pituusAste double, leveysAste double, teksti varchar(255), primary key (ID))
		 * 
		 */
		EntityBean entity = new EntityBean();
		entity.setIndeksi(-1);
		entity.setTeksti("Virhe  tietokannan alustus operaatiossa");

		try {
			Session sessio = HibernateUtil.getSessionFactory().getCurrentSession();
			sessio.beginTransaction();
			HibernateUtil.getSessionFactory().getCurrentSession().createQuery("delete EntityBean");
			sessio.getTransaction().commit();
			entity.setTeksti("Tietokanna alustus onnistui");
			entity.setIndeksi(1);
		} catch (HibernateException e) {
			entity.setTeksti("Poikkeus tietokannan poistamisessa");
		}

		return entity;
	}



}
